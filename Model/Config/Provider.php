<?php
/**
 * Source by eGooTY - https://egooty.com
 *
 * @category    Egooty
 * @package     Egooty_SeoToolkits
 * @author      Mudassar Ali <sahil_bwp@yahoo.com>
 * @author      eGooTY <dev@egooty.com>
 * @copyright   Copyright (c) eGooTY Pvt. (https://egooty.com)
 * @license     https://egooty.com/source-legal-information/ eGooTY End User License Agreement
 *
 * DISCLAIMER
 *
 * Do not edit this file if you wish to update the extension in the future. If you wish to customize the extension
 * for your needs please refer to our support for more information.
 */

declare(strict_types=1);

namespace Egooty\SeoToolkits\Model\Config;

use Magento\Framework\App\Config\ScopeConfigInterface;
use Magento\Framework\Exception\NoSuchEntityException;
use Magento\Store\Model\StoreManagerInterface;
use Magento\Store\Model\ScopeInterface;

/**
 * Class Provider to fetch config value
 */
class Provider
{
    /**
     * @var
     */
    private const XML_PATH_ENABLE_DISABLE = 'seo_toolkits/hreflang_config/enable';

    /**
     * @var
     */
    private const XML_PATH_ENABLE_FOR_PRODUCT_PAGE = 'seo_toolkits/hreflang_config/enable_product_page';

    /**
     * @var
     */
    private const XML_PATH_ENABLE_FOR_CATEGORY_PAGE = 'seo_toolkits/hreflang_config/enable_category_page';

    /**
     * @var
     */
    private const XML_PATH_ENABLE_FOR_CMS_PAGE = 'seo_toolkits/hreflang_config/enable_cms_page';

    /**
     * @var
     */
    private const XML_PATH_ENABLE_X_DEFAULT = 'seo_toolkits/hreflang_config/enable_x_default';

    /**
     * @var
     */
    private const XML_PATH_DISABLE_FOR_LOCALE = 'seo_toolkits/locale_config/enable_locale';

    /**
     * @var
     */
    private const XML_PATH_ENABLE_CANONICAL_FOR_HOME_PAGE = 'seo_toolkits/canonical_config/canon_landing';
    /**
     * @var
     */
    private const XML_PATH_ENABLE_CANONICAL_FOR_CMS_PAGE = 'seo_toolkits/canonical_config/canon_cms_page';


    /**
     * @var ScopeConfigInterface
     */
    private ScopeConfigInterface $scopeConfig;

    /**
     * @var StoreManagerInterface
     */
    private StoreManagerInterface $storeManager;

    /**
     * Provider Constructor
     *
     * @param ScopeConfigInterface  $scopeConfig
     * @param StoreManagerInterface $storeManager
     */
    public function __construct(
        ScopeConfigInterface $scopeConfig,
        StoreManagerInterface $storeManager
    ) {
        $this->scopeConfig = $scopeConfig;
        $this->storeManager = $storeManager;
    }

    /**
     * Get Module Status from configuration
     *
     * @return bool
     * @throws NoSuchEntityException
     */
    public function getModuleStatus(): bool
    {
        return $this->getStatus(self::XML_PATH_ENABLE_DISABLE);
    }

    /**
     * Check Enable For Product Page Status from configuration
     *
     * @return bool
     * @throws NoSuchEntityException
     */
    public function checkEnableForProductPage(): bool
    {
        return $this->getStatus(self::XML_PATH_ENABLE_FOR_PRODUCT_PAGE);
    }

    /**
     * Check Enable For Category Page Status from configuration
     *
     * @return bool
     * @throws NoSuchEntityException
     */
    public function checkEnableForCategoryPage(): bool
    {
        return $this->getStatus(self::XML_PATH_ENABLE_FOR_CATEGORY_PAGE);
    }

    /**
     * Check Enable For CMS Page Status from configuration
     *
     * @return bool
     * @throws NoSuchEntityException
     */
    public function checkEnableForCmsPage(): bool
    {
        return $this->getStatus(self::XML_PATH_ENABLE_FOR_CMS_PAGE);
    }

    /**
     * Check Enable X-Default Status from configuration
     *
     * @return bool
     * @throws NoSuchEntityException
     */
    public function checkEnableXDefault(): bool
    {
        return $this->getStatus(self::XML_PATH_ENABLE_X_DEFAULT);
    }

    /**
     * Check Enable X-Default Status from configuration
     *
     * @return bool
     * @throws NoSuchEntityException
     */
    public function checkCanonicalEnableForCmsPage(): bool
    {
        return $this->getStatus(self::XML_PATH_ENABLE_CANONICAL_FOR_CMS_PAGE);
    }

    /**
     * Check Enable X-Default Status from configuration
     *
     * @return bool
     * @throws NoSuchEntityException
     */
    public function checkCanonicalEnableForHomePage(): bool
    {
        return $this->getStatus(self::XML_PATH_ENABLE_CANONICAL_FOR_HOME_PAGE);
    }

    /**
     * Get enable locale(s) to display hreflang link from configuration
     *
     * @return array
     * @throws NoSuchEntityException
     */
    public function getEnableLocales(): array
    {
        return $this->getArray(
            $this->getStoreValue(self::XML_PATH_DISABLE_FOR_LOCALE)
        );
    }

    /**
     * Get filtered array for string
     *
     * @param  null|string $string
     * @return array
     */
    private function getArray(string $string = null): array
    {
        if ($string) {
            return array_filter(
                array_map('trim', preg_split("/\r\n|\n|\r|,/", $string))
            );
        }

        return [];
    }

    /**
     * Get Status from configuration
     *
     * @param  string $configPath
     * @return bool
     * @throws NoSuchEntityException
     */
    public function getStatus(string $configPath): bool
    {
        return $this->scopeConfig->isSetFlag(
            $configPath,
            ScopeInterface::SCOPE_STORE,
            $this->storeManager->getStore()->getId()
        );
    }

    /**
     * Get store value from configuration
     *
     * @param  string $configPath
     * @return null|string
     * @throws NoSuchEntityException
     */
    private function getStoreValue(string $configPath): ?string
    {
        return $this->scopeConfig->getValue(
            $configPath,
            ScopeInterface::SCOPE_STORE,
            $this->storeManager->getStore()->getId()
        );
    }
}