<?php
/**
 * Source by eGooTY - https://egooty.com
 *
 * @category    Egooty
 * @package     Egooty_SeoToolkits
 * @author      Mudassar Ali <sahil_bwp@yahoo.com>
 * @author      eGooTY <dev@egooty.com>
 * @copyright   Copyright (c) eGooTY Pvt. (https://egooty.com)
 * @license     https://egooty.com/source-legal-information/ eGooTY End User License Agreement
 *
 * DISCLAIMER
 *
 * Do not edit this file if you wish to update the extension in the future. If you wish to customize the extension
 * for your needs please refer to our support for more information.
 */

declare(strict_types=1);

namespace Egooty\SeoToolkits\ViewModel\Html\Header;

use Magento\Framework\App\Config\ScopeConfigInterface;
use Magento\Framework\Exception\NoSuchEntityException;
use Magento\Framework\View\Element\Block\ArgumentInterface;
use Magento\Cms\Block\Page as CmsPage;
use Magento\Catalog\Helper\Data as CatalogHelper;
use Magento\Framework\App\Request\Http;
use Magento\Store\Model\ScopeInterface;
use Magento\Store\Model\StoreManagerInterface;
use Magento\Store\Model\Store;
use Egooty\SeoToolkits\Model\Config\Provider as ConfigProvider;
use Magento\Framework\UrlInterface;
use Magento\Cms\Model\Page;
use Magento\Catalog\Model\Product;
use Magento\Catalog\Model\Category;

class HreflangData implements ArgumentInterface
{
    /**
     * @var Http
     */
    private Http $request;

    /**
     * @var CmsPage
     */
    private CmsPage $cmsPage;

    /**
     * @var CatalogHelper
     */
    private CatalogHelper $catalogHelper;

    /**
     * @var StoreManagerInterface
     */
    private StoreManagerInterface $storeManager;

    /**
     * @var ConfigProvider
     */
    private ConfigProvider $configProvider;

    /**
     * @var \Magento\Framework\App\Config\ScopeConfigInterface
     */
    protected $scopeConfig;

    /**
     * @var UrlInterface
     */
    private UrlInterface $urlInterface;


    /**
     * HreflangData constructor.
     *
     * @param Http $request
     * @param CmsPage $cmsPage
     * @param CatalogHelper $catalogHelper
     * @param StoreManagerInterface $storeManager
     * @param ConfigProvider $configProvider
     * @param ScopeConfigInterface $scopeConfig
     * @param UrlInterface $urlInterface
     */
    public function __construct(
        Http                  $request,
        CmsPage               $cmsPage,
        CatalogHelper         $catalogHelper,
        StoreManagerInterface $storeManager,
        ConfigProvider        $configProvider,
        ScopeConfigInterface  $scopeConfig,
        UrlInterface          $urlInterface
    )
    {
        $this->request = $request;
        $this->cmsPage = $cmsPage;
        $this->catalogHelper = $catalogHelper;
        $this->storeManager = $storeManager;
        $this->configProvider = $configProvider;
        $this->scopeConfig = $scopeConfig;
        $this->urlInterface = $urlInterface;
    }

    /**
     * Get hreflang links
     *
     * @return array
     * @throws NoSuchEntityException
     */
    public function getLinks(): array
    {
        if ($this->isEnableHreflang()) {
            return $this->getHreflangData();
        }

        return [];
    }

    /**
     * Check if hreflang is enabled
     *
     * @return bool
     * @throws NoSuchEntityException
     */
    public function isEnableHreflang(): bool
    {
        if ($this->configProvider->getModuleStatus()
            && in_array(
                $this->storeManager->getStore()->getCode(),
                $this->configProvider->getEnableLocales()
            )
        ) {
            return true;
        }

        return false;
    }

    /**
     * Canonical is enabled
     *
     * @return bool
     * @throws NoSuchEntityException
     */
    public function isEnableCanonical(): bool
    {
        $allowedPageTypes = ["cms_index_index", "cms_page_view"];
        if (in_array($this->getCurrentPageType(), $allowedPageTypes) &&
            ($this->configProvider->checkCanonicalEnableForCmsPage() ||
                $this->configProvider->checkCanonicalEnableForHomePage()
            )) {
            return true;
        }
        return false;
    }

    /**
     * Check if X Default is enabled
     *
     * @return bool
     * @throws NoSuchEntityException
     */
    public function isEnableXDefault(): bool
    {
        if ($this->configProvider->checkEnableXDefault()) {
            return true;
        }
        return false;
    }

    /**
     * NO usage
     * @return bool
     * @throws NoSuchEntityException
     */
    public function isEnableXDefaultOld(): bool
    {
        if ($this->isEnableHreflang()
            && $this->configProvider->checkEnableXDefault()
            && $this->getCurrentPageType() == 'cms_index_index'
        ) {
            return true;
        }

        return false;
    }

    /**
     * Get hreflang data
     *
     * @return array
     * @throws NoSuchEntityException
     */
    private function getHreflangData(): array
    {
        if ($this->configProvider->checkEnableForProductPage()
            && $this->getCurrentPageType() == 'catalog_product_view'
        ) {
            return $this->getData('product');
        } elseif ($this->configProvider->checkEnableForCategoryPage()
            && $this->getCurrentPageType() == 'catalog_category_view'
        ) {
            return $this->getData('category');
        } elseif ($this->configProvider->checkEnableForCmsPage()
            && $this->cmsPage->getPage()->getId()
        ) {
            return $this->getData('cms');
        }

        return [];
    }

    /**
     * Get data for links
     *
     * @param string $pageType
     * @return array
     * @throws NoSuchEntityException
     */
    private function getData(string $pageType): array
    {
        if ($pageType == 'product') {
            return $this->getLinksArray($this->catalogHelper->getProduct());
        } elseif ($pageType == 'category') {
            return $this->getLinksArray($this->catalogHelper->getCategory());
        } elseif ($pageType == 'cms') {
            return $this->getLinksArray($this->cmsPage->getPage());
        }

        return [];
    }

    /**
     * Get current page type
     *
     * @return string
     */
    private function getCurrentPageType(): string
    {
        return $this->request->getFullActionName();
    }

    /**
     * Get hreflang link array
     *
     * @param Category|Page|Product $entityType
     * @return array
     * @throws NoSuchEntityException
     */
    // private function getLinksArray(Category|Page|Product $entityType): array only allowed in php 8.0
    private function getLinksArray($entityType): array
    {
        foreach ($this->storeManager->getStores() as $store) {
            if (in_array(
                $store->getCode(),
                $this->configProvider->getEnableLocales()
            )
            ) {
                /**
                 * if this is enable then we don't need to show current url
                 */
                if ($this->configProvider->checkEnableXDefault() && ($this->getCurrentStoreId() == $store->getId())) {
                    continue;  // skip for current store
                }
                $links[] = [
                    // 'code' => $store->getCode(), // default, france, germany, holland, spain
                    // we need en_GB, nl_NL
                    'store' => $store->getCode(),
                    'code' => $this->formatCodeToISO639($this->getStoreLocale($store)),
                    'url' => $this->getUrl($store, $entityType)
                ];
            }
        }

        return $links ?? [];
    }


    /**
     * Get URL for hreflang link
     *
     * @param Store $store
     * @param Category|Page|Product $entityType
     * @return string
     */
    // private function getUrl(Store $store, Category|Page|Product $entityType): string // only in PHP 8.0
    private function getUrl(Store $store, $entityType): string
    {
        if (!$this->cmsPage->getPage()->getId()) {
            return $store->getBaseUrl() . $entityType->getUrlKey() . '.html';
        } else {
            if ($this->request->getFullActionName() == 'cms_index_index') {
                return $store->getBaseUrl();
            }

            return $store->getBaseUrl() . $entityType->getIdentifier();
        }
    }

    /**
     *  Get Canonical Url
     *
     * @return string
     */
    public function getCanonicalUrl(): string
    {
        return $this->urlInterface->getCurrentUrl();
    }

    /**
     *  Get X-Defalt Url of current page
     *
     * @return string
     */
    public function getXDefaultUrlWithCode(): string
    {
        return $this->urlInterface->getCurrentUrl();
    }

    /**
     * Get base URL without store code
     *
     * @return string
     * @throws NoSuchEntityException
     */
    public function getBaseUrlWithoutCode(): string
    {
        return $this->storeManager->getStore()->getBaseUrl(
            UrlInterface::URL_TYPE_WEB
        );
    }

    /**
     * @return string
     */
    public function printMetaTags(): string
    {
        return base64_decode('PCEtLSBEZXNpZ24gJiBkZXZlbG9wZWQgYnkgZUdvb3R5ICAtIGh0dHBzOi8vZWdvb3R5LmNvbS8gLS0+CjxtZXRhIG5hbWU9ImNvcHlyaWdodCIgY29udGVudD0iZUdvb3R5IiAvPgo8bWV0YSBuYW1lPSJ3ZWJfYXV0aG9yIiBjb250ZW50PSJNdWRhc3NhciBBbGksIHNhaGlsX2J3cEB5YWhvby5jb20iIC8+CjxtZXRhIG5hbWU9ImF1dGhvciIgY29udGVudD0iZUdvb3R5LCBkZXZAZWdvb3R5LmNvbSIgLz4KPG1ldGEgbmFtZT0iZGVzaWduZXIiIGNvbnRlbnQ9ImVHb290eSIgLz4KPG1ldGEgbmFtZT0icmVwbHktdG8iIGNvbnRlbnQ9ImRldkBlZ29vdHkuY29tIiAvPg==');
    }

    /**
     * @param Store $store
     * @return string
     */
    private function getStoreLocale(Store $store): string
    {
        return $this->scopeConfig->getValue('general/locale/code', ScopeInterface::SCOPE_STORE, $store->getStoreId());
    }

    /**
     * Language code convert to ISO639-1 language code
     * @param $code
     * @return string
     */
    private function formatCodeToISO639($code): string
    {
        return str_replace("_", "-", strtolower($code));
    }

    /**
     *  Get Current Store ID
     *
     * @return int
     * @throws NoSuchEntityException
     */
    private function getCurrentStoreId(): int
    {
        return (int)$this->storeManager->getStore()->getId();
    }


}
